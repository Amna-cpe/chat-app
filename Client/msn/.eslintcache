[{"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\index.js":"1","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\App.js":"2","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\pages\\Register.js":"3","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Register.js":"4","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\ApolloProvider.js":"5","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Login.js":"6","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Home.js":"7","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\context\\Auth.js":"8","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\utill\\AuthRoute.js":"9","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\users.js":"10","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\messages.js":"11","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\context\\message.js":"12","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\Message.js":"13"},{"size":199,"mtime":1608443913541,"results":"14","hashOfConfig":"15"},{"size":890,"mtime":1608704759789,"results":"16","hashOfConfig":"15"},{"size":2579,"mtime":1608449079422,"results":"17","hashOfConfig":"15"},{"size":4381,"mtime":1608613200131,"results":"18","hashOfConfig":"15"},{"size":1467,"mtime":1608747301063,"results":"19","hashOfConfig":"15"},{"size":3133,"mtime":1608747604097,"results":"20","hashOfConfig":"15"},{"size":2952,"mtime":1608830013170,"results":"21","hashOfConfig":"15"},{"size":1475,"mtime":1608615998194,"results":"22","hashOfConfig":"15"},{"size":626,"mtime":1608616439011,"results":"23","hashOfConfig":"15"},{"size":2205,"mtime":1611559233206,"results":"24","hashOfConfig":"15"},{"size":3760,"mtime":1608829678061,"results":"25","hashOfConfig":"15"},{"size":3881,"mtime":1608829212090,"results":"26","hashOfConfig":"15"},{"size":2776,"mtime":1608830497497,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"nnstmy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\index.js",[],["59","60"],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\App.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\pages\\Register.js",["61"],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Register.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\ApolloProvider.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Login.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\Pages\\Home.js",["62","63","64","65","66","67"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Button, Container, Image } from \"react-bootstrap\";\r\nimport { useAuthDispatch, useAuthState } from \"../context/Auth\";\r\nimport {useMessageDispatch ,useMessageState} from \"../context/message\"\r\nimport { gql, useSubscription } from \"@apollo/client\";\r\nimport Users from \"../components/users\";\r\nimport Messages from \"../components/messages\";\r\n\r\nconst SUBSCRIPTION_NEW_MSG = gql`\r\nsubscription newMsg{ \r\n  newMsg{\r\n        uuid\r\n        content\r\n        to\r\n        from\r\n        createdAt\r\n  }\r\n}\r\n`\r\n\r\nconst SUBSCRIPTION_NEW_REACTION = gql`\r\nsubscription newReaction{ \r\n  newReaction{\r\n        uuid content\r\n        message{\r\n          to from uuid\r\n        }\r\n              \r\n  }\r\n}\r\n`\r\n\r\n\r\nfunction Home() {\r\n\r\n  const dispatch = useAuthDispatch();\r\n  const msgDispatch = useMessageDispatch();\r\n  const { user } = useAuthState();\r\n  const { users } = useMessageState();\r\n\r\n  const {data:msgData , error:Msgerror} = useSubscription(SUBSCRIPTION_NEW_MSG)\r\n  const {data:ReactionData , error:ReactionError} = useSubscription(SUBSCRIPTION_NEW_REACTION)\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(Msgerror) console.log(Msgerror)\r\n\r\n    //get the selected user it may not be the selected user!! BECAREFULL\r\n    // let userSelected = users.map(u=>u.useMessageState===true).username\r\n    \r\n    if(msgData){  \r\n     // ABLE TO RCV MSG FROM OTHER (NON-SELECTED-USERS)\r\n    // IF IT WAS TO ME , ADD IT TO THE FROM USER\r\n    // IF IT WAS FROM ME , ADD IT TO THE TO USER\r\n      const otherUser = user.username ===msgData.newMsg.to ?msgData.newMsg.from : msgData.newMsg.to\r\n      msgDispatch({\r\n        type:'ADD_NEW_MESSAGE',\r\n        payload:{\r\n          username:otherUser ,\r\n          message:msgData.newMsg\r\n        }\r\n      })\r\n    }\r\n  }, [msgData , Msgerror ])\r\n\r\nuseEffect( ()=>{\r\n  if(ReactionData){  \r\n     \r\n    // SEND IT TO THE 'FROM' \r\n    // if the message is to me then send the reaction to the other party\r\n     const otherUser = user.username === ReactionData.newReaction.message.to?\r\n     ReactionData.newReaction.message.from : ReactionData.newReaction.message.to \r\n     console.log(otherUser)\r\n\r\n     msgDispatch({\r\n       type:'ADD_NEW_REACTION',\r\n       payload:{\r\n         username:otherUser ,\r\n         reaction:ReactionData.newReaction\r\n       }\r\n     })\r\n   }\r\n }, [ReactionData , ReactionError ])\r\n\r\n  const logout = () => {\r\n    dispatch({\r\n      type: \"LOGOUT\",\r\n    });\r\n    window.location.href = '/login'\r\n    \r\n  };\r\n\r\n  return (\r\n    <Container className=\"py-2 mt-2\">\r\n      <Row className=\"justify-content-around p-2 mb-2 bg-dark\">\r\n        <Button varient=\"text\" disabled>\r\n          Hello {user.username}\r\n        </Button>\r\n\r\n        <Button varient=\"link\" onClick={logout}>\r\n          logout\r\n        </Button>\r\n      </Row>\r\n      <Row className='bg-dark'>\r\n        <Users />\r\n        <Messages />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\context\\Auth.js",["68","69"],"import React, { createContext, useReducer, useContext } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\nconst AuthStateContext = createContext();\r\nconst AuthDispatchContext = createContext();\r\n\r\nlet user =null;\r\nconst token = localStorage.getItem(\"token\");\r\n\r\nif (token) {\r\n  const decodedToken = jwtDecode(token);\r\n  const expDate = new Date(decodedToken.exp * 1000);\r\n  if (new Date() > expDate) {\r\n    localStorage.removeItem(token);\r\n  } else {\r\n    user = decodedToken;\r\n  }\r\n} else {\r\n  console.log('no token suuurrr!!!!!')\r\n}\r\n\r\nconst AuthReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      localStorage.setItem(\"token\", action.payload.token);\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n      break;\r\n    case \"LOGOUT\":\r\n      localStorage.removeItem(\"token\");\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n      break;\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nexport const AuthProvider = (props) => {\r\n  const [state, dispatch] = useReducer(AuthReducer, { user });\r\n\r\n  return (\r\n    <AuthDispatchContext.Provider value={dispatch}>\r\n      <AuthStateContext.Provider value={state}>\r\n        {props.children}\r\n      </AuthStateContext.Provider>\r\n    </AuthDispatchContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuthState = () => useContext(AuthStateContext);\r\nexport const useAuthDispatch = () => useContext(AuthDispatchContext);\r\n","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\utill\\AuthRoute.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\users.js",[],"D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\messages.js",["70","71","72","73"],"import React, { useEffect ,useState } from \"react\";\r\nimport { Col, Form } from \"react-bootstrap\";\r\nimport { gql, useLazyQuery , useMutation } from \"@apollo/client\";\r\nimport { useMessageState, useMessageDispatch } from \"../context/message\";\r\nimport Message from \"../components/Message\";\r\n\r\nconst GET_MESSAGES_FROM_USER_SELECTED = gql`\r\n  query getMessages($from: String!) {\r\n    getMessages(from: $from) {\r\n      to\r\n      content\r\n      createdAt\r\n      uuid\r\n      from\r\n      reactions{\r\n        uuid content\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_MESSAGE = gql`\r\n  mutation sendMessage($to: String!,$content:String!) {\r\n    sendMessage(to: $to , content:$content) {\r\n      to\r\n      content\r\n      createdAt\r\n      uuid\r\n      from\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Messages() {\r\n  const [content, setContent] = useState('')\r\n    const { users } = useMessageState();\r\n  const dispatch = useMessageDispatch();\r\n  const userSelected = users?.find((u) => u.selectedUser === true);\r\n  const messages = userSelected?.messages;\r\n\r\n  const [getMessages, { loading: msgLoading, data: msgData }] = useLazyQuery(\r\n    GET_MESSAGES_FROM_USER_SELECTED\r\n  );\r\n\r\n  const [addMessage , {data:newMsg}] = useMutation(ADD_MESSAGE,{\r\n    // onCompleted:(data)=>dispatch({\r\n    //   type:'ADD_NEW_MESSAGE',\r\n    //   payload:{\r\n    //     username:userSelected.username ,\r\n    //     message:data.sendMessage\r\n    //   }\r\n    // }),\r\n    onError:(err)=>console.log(JSON.stringify(err, null, 2))\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    //ONLY RENDER THE FIRST TIME (THE QUERY)\r\n    if (userSelected && !userSelected.messages) {\r\n      getMessages({ variables: { from: userSelected.username } });\r\n    }\r\n  }, [userSelected]);\r\n\r\n  useEffect(() => {\r\n    //IF IT RENDERED SAVE IT TO THE CONTEXT (NO USE OF QUERY AGAIN!!!)\r\n    if (msgData) {\r\n      dispatch({\r\n        type: \"SET_USER_MESSAGES\",\r\n        payload: {\r\n          username: userSelected.username,\r\n          messages: msgData.getMessages,\r\n        },\r\n      });\r\n    }\r\n  }, [msgData]);\r\n\r\n  const submitTheMessage = (e)=>{\r\n    e.preventDefault()\r\n    if(userSelected && content!=='')\r\n    addMessage({variables:{content,to:userSelected.username}})\r\n  }\r\n\r\n  let uiMessagesMarkup;\r\n  if (!messages && !msgLoading) {\r\n    uiMessagesMarkup = <p className=\"text-white info-text\">Select a friend or group</p>;\r\n  } else if (msgLoading) {\r\n    uiMessagesMarkup = <p className='info-text'>loading honey..</p>;\r\n  } else if (messages.length === 0) {\r\n    uiMessagesMarkup = <p className='info-text'>NO MESSAGES BETWEEN YOU TOO START CHATING?</p>;\r\n  } else if (messages.length > 0) {\r\n    uiMessagesMarkup = messages.map((m, index) => (\r\n      <>\r\n        {\" \"}\r\n        <Message key={m.uuid} msg={m} />\r\n        {index === messages.length - 1 && (\r\n          <div className=\"invisible\">\r\n            <hr className=\"m-0\" />\r\n          </div>\r\n        )}\r\n      </>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <Col  className=\"p-0 col-md-8 col-10\">\r\n      <div className=\"col-custome p-2\">{uiMessagesMarkup}</div>\r\n      <div className=\"bg-white\">\r\n        <Form className=\"d-flex \" onSubmit={submitTheMessage}>\r\n          <Form.Control\r\n            size=\"lg\"\r\n            type=\"text\"\r\n            placeholder=\"Type..\"\r\n            className=\"mb-1 b-0\"\r\n            value={content}\r\n            name='content'\r\n            onChange={(e)=>(setContent(e.target.value))}\r\n            disabled={!userSelected}\r\n          />\r\n          <img\r\n            src=\"https://img.icons8.com/fluent/48/000000/filled-sent.png\"\r\n            role=\"button\"\r\n            disabled={!userSelected}\r\n            className='btn-send'\r\n            onClick={submitTheMessage}\r\n          />\r\n        </Form>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default Messages;\r\n","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\context\\message.js",["74","75","76","77"],"import { compareSync } from \"bcryptjs\";\r\nimport React, { createContext, useReducer, useContext } from \"react\";\r\n\r\nconst MessageStateContext = createContext();\r\nconst MessageDispatchContext = createContext();\r\n\r\nconst MessageReducer = (state, action) => {\r\n  let usersCopy;\r\n  const { username, messages, message, reaction } = action.payload;\r\n  let userIndex;\r\n  switch (action.type) {\r\n    case \"SET_USERS\":\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n      break;\r\n    case \"SET_USER_SELECTED\":\r\n      usersCopy = state.users.map((u) => ({\r\n        ...u,\r\n        selectedUser: u.username === action.payload ? true : false,\r\n      }));\r\n\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n      break;\r\n    case \"SET_USER_MESSAGES\":\r\n      usersCopy = [...state.users];\r\n      // FIND AN INDEX OF THE USER AND INSERT TO IT THE MESSAGES\r\n\r\n      userIndex = usersCopy.findIndex((u) => u.username === username);\r\n      usersCopy[userIndex] = { ...usersCopy[userIndex], messages };\r\n      // RE-WRITE THE USERS\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n      break;\r\n\r\n    case \"ADD_NEW_MESSAGE\":\r\n      // COPY USERS\r\n      usersCopy = [...state.users];\r\n      // FIND THE INDEX of the 'to' user\r\n      userIndex = usersCopy.findIndex((u) => u.username === username);\r\n      // ATTACH TO THE USER A NEW MSG\r\n\r\n      //IF HAVENT SELECTED 'USER' YET STILL NOT HAVE MSGEESD\r\n      // IF YOU TRY TO ADD TO IT IT WILL FAIL -->FIXX\r\n      usersCopy[userIndex].messages\r\n        ? (usersCopy[userIndex].messages = [\r\n            message,\r\n            ...usersCopy[userIndex].messages,\r\n          ])\r\n        : (usersCopy[userIndex].messages = null);\r\n      usersCopy[userIndex].latestMessage = message;\r\n\r\n      // WHEN THE USER ADD MESSAGE IT DOES NOT HAVE REACTIONS NEED TO SET IT \r\n      // EMPTY ARRAY\r\n      usersCopy[userIndex].messages[0].reactions = []\r\n\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n\r\n    case \"ADD_NEW_REACTION\":\r\n      // COPY USERS\r\n      usersCopy = [...state.users];\r\n      // FIND THE INDEX of the 'from' \r\n      userIndex = usersCopy.findIndex((u) => u.username === username);\r\n      //COPY THE USER\r\n      let userCopy = { ...usersCopy[userIndex] };\r\n      // get the msg index\r\n      let msgIndex = userCopy.messages?.findIndex(\r\n        (m) => m.uuid === reaction.message.uuid\r\n      );\r\n    \r\n      if (msgIndex > -1) {\r\n        // if the msg exist\r\n        //copy of users msgs\r\n        let msgsCopy = [...userCopy.messages];\r\n        let reactionsCopy = [...msgsCopy[msgIndex].reactions];\r\n        let reactionIndex = reactionsCopy.findIndex(\r\n          (r) => r.uuid === reaction.uuid\r\n        );\r\n        if (reactionIndex > -1) {\r\n          //reaction exists need to be update\r\n          reactionsCopy[reactionIndex] = reaction;\r\n        } else {\r\n          //new reaction add it\r\n          reactionsCopy = [...reactionsCopy, reaction]\r\n        }\r\n        msgsCopy[msgIndex] = {\r\n          ...msgsCopy[msgIndex],\r\n          reactions:reactionsCopy\r\n        }\r\n        userCopy = {...userCopy , messages:msgsCopy}\r\n        usersCopy[userIndex]=userCopy\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nexport const MessageProvider = (props) => {\r\n  const [state, dispatch] = useReducer(MessageReducer, { users: null });\r\n\r\n  return (\r\n    <MessageDispatchContext.Provider value={dispatch}>\r\n      <MessageStateContext.Provider value={state}>\r\n        {props.children}\r\n      </MessageStateContext.Provider>\r\n    </MessageDispatchContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useMessageState = () => useContext(MessageStateContext);\r\nexport const useMessageDispatch = () => useContext(MessageDispatchContext);\r\n","D:\\JavaSC\\React\\myNewProject\\Client\\msn\\src\\components\\Message.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":2,"column":33,"nodeType":"84","messageId":"85","endLine":2,"endColumn":37},{"ruleId":"82","severity":1,"message":"86","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"87","line":2,"column":15,"nodeType":"84","messageId":"85","endLine":2,"endColumn":18},{"ruleId":"82","severity":1,"message":"88","line":2,"column":39,"nodeType":"84","messageId":"85","endLine":2,"endColumn":44},{"ruleId":"82","severity":1,"message":"89","line":39,"column":11,"nodeType":"84","messageId":"85","endLine":39,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":65,"column":6,"nodeType":"92","endLine":65,"endColumn":27,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"91","line":84,"column":5,"nodeType":"92","endLine":84,"endColumn":36,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":29,"column":7,"nodeType":"97","messageId":"98","endLine":29,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":36,"column":7,"nodeType":"97","messageId":"98","endLine":36,"endColumn":13},{"ruleId":"82","severity":1,"message":"99","line":45,"column":29,"nodeType":"84","messageId":"85","endLine":45,"endColumn":35},{"ruleId":"90","severity":1,"message":"100","line":62,"column":6,"nodeType":"92","endLine":62,"endColumn":20,"suggestions":"101"},{"ruleId":"90","severity":1,"message":"102","line":75,"column":6,"nodeType":"92","endLine":75,"endColumn":15,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":119,"column":11,"nodeType":"106","endLine":125,"endColumn":13},{"ruleId":"82","severity":1,"message":"107","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":17,"column":7,"nodeType":"97","messageId":"98","endLine":17,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":28,"column":7,"nodeType":"97","messageId":"98","endLine":28,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":40,"column":7,"nodeType":"97","messageId":"98","endLine":40,"endColumn":13},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Col' is defined but never used.","'Image' is defined but never used.","'users' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'msgDispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["110"],["111"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'newMsg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has missing dependencies: 'dispatch' and 'userSelected.username'. Either include them or remove the dependency array.",["113"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'compareSync' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [msgData, Msgerror, user.username, msgDispatch]",{"range":"122","text":"123"},"Update the dependencies array to be: [ReactionData, ReactionError, msgDispatch, user.username]",{"range":"124","text":"125"},"Update the dependencies array to be: [getMessages, userSelected]",{"range":"126","text":"127"},"Update the dependencies array to be: [dispatch, msgData, userSelected.username]",{"range":"128","text":"129"},[1792,1813],"[msgData, Msgerror, user.username, msgDispatch]",[2339,2370],"[ReactionData, ReactionError, msgDispatch, user.username]",[1680,1694],"[getMessages, userSelected]",[2008,2017],"[dispatch, msgData, userSelected.username]"]